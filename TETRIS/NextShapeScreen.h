#ifndef NEXT_SHAPE_SCREEN_Hvoid createNextBoard(){    int i = 0, j, tempX, tempY;    next_dy = 4*(nextBlock_len + 2*wall_width);    next_dx = 5*(nextBlock_len + 2*wall_width);    next_x = board_x + board_dx + BoardGap;    next_y = board_y + board_dy - next_dy - 28;    for(i = 0; i < 4; i++)        for(j = 0; j < 5; j++){            tempX = next_x + wall_width + j*(nextBlock_len + 2*wall_width);            tempY = next_y + wall_width + i*(nextBlock_len + 2*wall_width);            nextCellX[i][j] = tempX;            nextCellY[i][j] = tempY;        }}/* Draws the next board to display what shape will be coming up next. */void drawNextWindow(){    iSetColor(gameBoard[0][0].R, gameBoard[0][0].G, gameBoard[0][0].B);    iFilledRectangle(next_x, next_y, next_dx, next_dy);    iSetColor(220, 220, 250);    iFilledRectangle(next_x, nextCellY[3][0]+nextBlock_len, next_dx, 28);    iSetColor(0, 0, 230);    RetroText(next_x+36, nextCellY[3][0]+nextBlock_len+7, "NEXT",2);    double tempX, tempY, dl, dw;    switch(nextShapeIndex){    case 0:        dl = 4*(nextBlock_len + 2*wall_width);        dw = nextBlock_len;        tempX = next_x + (next_dx - dl)/2.0;        tempY = next_y + (next_dy - dw - dw)/2.0;        block(tempX, tempY, nextBlock_len, nextShapeIndex);        block(tempX+2*wall_width+nextBlock_len, tempY, nextBlock_len, nextShapeIndex);        block(tempX+4*wall_width+2*nextBlock_len, tempY, nextBlock_len, nextShapeIndex);        block(tempX+6*wall_width+3*nextBlock_len, tempY, nextBlock_len, nextShapeIndex);        break;    case 1:        block(nextCellX[1][1], nextCellY[1][1], nextBlock_len, nextShapeIndex);        block(nextCellX[1][2], nextCellY[1][2], nextBlock_len, nextShapeIndex);        block(nextCellX[1][3], nextCellY[1][3], nextBlock_len, nextShapeIndex);        block(nextCellX[2][2], nextCellY[2][2], nextBlock_len, nextShapeIndex);        break;    case 2:        block(nextCellX[1][1], nextCellY[1][1], nextBlock_len, nextShapeIndex);        block(nextCellX[1][2], nextCellY[1][2], nextBlock_len, nextShapeIndex);        block(nextCellX[1][3], nextCellY[1][3], nextBlock_len, nextShapeIndex);        block(nextCellX[2][3], nextCellY[2][3], nextBlock_len, nextShapeIndex);        break;    case 3:        block(nextCellX[1][1], nextCellY[1][1], nextBlock_len, nextShapeIndex);        block(nextCellX[1][2], nextCellY[1][2], nextBlock_len, nextShapeIndex);        block(nextCellX[1][3], nextCellY[1][3], nextBlock_len, nextShapeIndex);        block(nextCellX[2][1], nextCellY[2][1], nextBlock_len, nextShapeIndex);        break;    case 4:        block(nextCellX[1][1], nextCellY[1][1], nextBlock_len, nextShapeIndex);        block(nextCellX[1][2], nextCellY[1][2], nextBlock_len, nextShapeIndex);        block(nextCellX[2][2], nextCellY[2][2], nextBlock_len, nextShapeIndex);        block(nextCellX[2][3], nextCellY[2][3], nextBlock_len, nextShapeIndex);        break;    case 5:        block(nextCellX[1][3], nextCellY[1][3], nextBlock_len, nextShapeIndex);        block(nextCellX[1][2], nextCellY[1][2], nextBlock_len, nextShapeIndex);        block(nextCellX[2][2], nextCellY[2][2], nextBlock_len, nextShapeIndex);        block(nextCellX[2][1], nextCellY[2][1], nextBlock_len, nextShapeIndex);        break;    case 6:        dl = 2*(nextBlock_len + 2*wall_width);        dw = dl;        tempX = next_x + (next_dx - dl)/2.0;        tempY = next_y + (next_dy - dw)/2.0;        block(tempX, tempY, nextBlock_len, nextShapeIndex);        block(tempX+2*wall_width+nextBlock_len, tempY, nextBlock_len, nextShapeIndex);        block(tempX, tempY+2*wall_width+nextBlock_len, nextBlock_len, nextShapeIndex);        block(tempX+2*wall_width+nextBlock_len, tempY+2*wall_width+nextBlock_len, nextBlock_len, nextShapeIndex);        break;    case 7:        block(nextCellX[2][2], nextCellY[2][2]-15, nextBlock_len, nextShapeIndex);        break;    default:        break;    }}#endif // NEXT_SHAPE_SCREEN_H