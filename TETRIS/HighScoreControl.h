#define MAX_SCORE_NO  6#define MAX_NAME_LEN 10void drawBar(double x, double y, double dx, double dy, int sizek, int selected);int isBarSelected(int mx, int my, int barx, int bary, int bardx, int bardy);int scoresList[MAX_SCORE_NO], recordIdx, len;char names[MAX_SCORE_NO][MAX_NAME_LEN+1];char userName[MAX_NAME_LEN+1];/* For drawing highscore */int nameX = 200, scoreX = 490;int nameY = 470, scoreY = 470;int nameGap = 46;/* Loads highscore from file and stores it in scoresList[]. The corresponding names   are stored in name[][] */void loadHighScores(){    int i;    FILE *fp;    if((fp = fopen("High Scores.txt", "r")) == NULL){        printf("Error opening High Scores.txt\n");        exit(-1);    }    memset(scoresList, -1, sizeof scoresList);    for(i = 0; i < MAX_SCORE_NO; i++) strcpy(names[i], "");//    printf("HIGHSCORE:\n");    for(i = 0; !feof(fp) && i < MAX_SCORE_NO; i++){        fscanf(fp, "%s %d", names[i], &scoresList[i]);//        printf("%s %d\n", names[i], scoresList[i]);    }    fclose(fp);}/* Called in iDraw if GAMESTATE == GAMERECORD. Takes the name of user as input   in userName[]. */void takeUserName(){    int dx = 600, dy = 500;    double x = board_x - BoardGap - next_dx;    double y = (700-dy)/2;    // Draws the pause screen background    iSetColor(240, 240, 240);    iFilledRectangle(x, y, dx, dy);    // Writes "NEW RECORD"    int NEWRECORD_DY = 140;    iSetColor(77, 148, 255);    RetroMiddleText(x+dx/2, y+dy-NEWRECORD_DY/2, "NEW RECORD", 9);    RetroMiddleText(x+dx/2, y+dy-NEWRECORD_DY/2-200, "ENTER YOUR NAME", 6);    RetroMiddleText(x+dx/2, y+dy-NEWRECORD_DY/2-250, userName, 3);}void updateHighScore(){    int i;    FILE *fp;    if((fp = fopen("High Scores.txt", "w")) == NULL){        printf("Error opening High Scores.txt\n");        exit(-2);    }    for(i = MAX_SCORE_NO-1; i > recordIdx; i--){        scoresList[i] = scoresList[i-1];        strcpy(names[i], names[i-1]);    }    scoresList[recordIdx] = userScore+nclear*bonus;    strcpy(names[recordIdx], userName);    for(i = 0; i < MAX_SCORE_NO && scoresList[i] >= 0; i++)        fprintf(fp, "%s %d\n", names[i], scoresList[i]);    fclose(fp);}/* Returns a non-negative integer indicating the position where the   new record is to be placed. If the current score is not a record,   a negative integer is returned. Called when user hits ENTER when GAMESTATE == GAMESCORE*/int isNewRecord(){    int i;    loadHighScores();    len = 0;    recordIdx = -1;    strcpy(userName, "");    for(i = 0; i < MAX_SCORE_NO; i++){        if(userScore+nclear*bonus >= scoresList[i]){            recordIdx = i;            break;        }    }    return recordIdx;}/* Called inside iDraw */void drawHighScore(){    iSetColor(140, 26, 255);    RetroMiddleText(400, 588, "HIGHSCORE", 8);    iSetColor(166, 77, 255);    RetroText(nameX, nameY, "NAME", 4);    RetroText(scoreX, scoreY, "SCORE", 4);    iSetColor(217, 179, 255);    int tempX, tempY, i;    char tempscore[10];    for(i = 0; scoresList[i] >= 0 && i < MAX_SCORE_NO; i++){        tempX = nameX;        tempY = nameY - (i+1)*nameGap;        RetroText(tempX, tempY, names[i], 3);        tempX = scoreX;        convertToString(scoresList[i], tempscore);        RetroText(tempX, tempY, tempscore, 3);    }    int backX = 314, backY = 100;    int backdx = 172, backdy = 60;    int selected = isBarSelected(Mx, My, backX, backY, backdx, backdy);    iSetColor(179, 102, 255);    drawBar(backX, backY, backdx, backdy, 6, selected);    int tempfnt = (selected) ? 4 : 3;    iSetColor(230, 230, 230);    RetroMiddleText(backX+backdx/2, backY+backdy/2 , "BACK", tempfnt);}void checkToMenuOption(int mx, int my){    int backX = 314, backY = 100;    int backdx = 172, backdy = 60;    int selected = isBarSelected(Mx, My, backX, backY, backdx, backdy);    if(selected) GAMESTATE = GAMEMENU;}